#!/usr/bin/env python3
"""
   jdoom: Prsent a quiz on calculating the day of the week
          for randomly selected dates using Conway's 
          Doomsday algorithm.

   Usage: 
      jdoom [-a=DATE] [-b=DATE] [-t] quiz
      jdoom [options] explain DATE
      jdoom -h | --help
      jdoom -V | --version

   Options:
      -a, --after=DATE    Show only dates after DATE 
                          [default: 1800-01-01]
      -b, --before=DATE   Show only dates before DATE 
                          [default: 2199-12-31]
      -t, --timer         Show how long user needed to compute answer
      -v, --verbose       Display verbose output

   Created 2018 by Jefferson Smith <jefferson@smithicus.com>
"""

import random
import time
import datetime
#from docopt import docopt
from docoptcfg import docoptcfg

# process command line args
args = docoptcfg(__doc__, env_prefix='JDOOM_', version='jdoom version 0.0.1')
# print args

dow_names = {0:'Sun', 1:'Mon', 2:'Tue', 3:'Wed', 4:'Thu', 5:'Fri', 6:'Sat'}

def anchor_day_for_century(somedate):
    # 1800=5, 1900=3, 2000=2 2100=0
    # so 18=5, 19=3, 20=2 and 21=0
    # reduces by modulus 4 to 0=2, 1=0, 2=5, 3=3
    anchors = {0:2, 1:0, 2:5, 3:3}
    yr = somedate.year
    cycle = yr//100 % 4
    return anchors[cycle]

def is_leap_year(somedate):
    yr = somedate.year
    if yr/400 == yr//400:
        return True
    elif yr/100 == yr//100:
        return False
    elif yr/4 == yr//4:
        return True
    return False
    
def doomsday_for_year(somedate):
    anchor = anchor_day_for_century(somedate)
    century_year = somedate.year % 100
    t1 = century_year // 12
    t2 = century_year % 12
    t3 = t2 // 4
    explain = "%d %d %d %d" % (anchor, t1, t2, t3)
    return (anchor + t1 + t2 + t3) % 7, explain

def anchor_date_for_month(somedate):
    m = somedate.month
    constant_anchors = {3:7, 4:4, 5:9, 6:6, 7:11, 8:8, 9:5, 10:10, 11:7, 12:12}
    if m in constant_anchors:
        return constant_anchors[m]
    elif is_leap_year(somedate): 
        if m == 1: return 32
        if m == 2: return 29
    else:
        if m == 1: return 31
        if m == 2: return 28

def doomsday_offset_for_day(somedate):
    anchor_day = anchor_date_for_month(somedate)
    return (somedate.day - anchor_day) % 7

def weekday_of_year_in_doomsday_format(somedate):
    # datetime uses Monday=0 but doomsday calculations use Sunday=0
    # so we need to take the weekday and increment it
    return (somedate.weekday()+1) % 7

def explain_doomsday_for_date(somedate):
    dday, year_explanation = doomsday_for_year(somedate)
    print("  Doomsday for the year was: %s = %d" % (year_explanation, dday))
    print("  Anchor date for the month is: %d" % anchor_date_for_month(somedate))
    print("  Anchor offset for that monthday is: %d" % doomsday_offset_for_day(somedate))


def run_quiz_loop(after_date, before_date):
    print("Enter a negative value to quit.\n")
    print("Using 0 for Sunday, 1 for Monday, etc., enter the day of the week for each date.")

    after = after_date.toordinal()
    before = before_date.toordinal()

    while True:
        target_date = datetime.date.fromordinal(random.randint(after, before))
        weekday =  weekday_of_year_in_doomsday_format(target_date)
        showtime = time.time()
        answer = None
        try:
            answer = input("%s: " % target_date.isoformat()[:10])
        except:
            pass
        if answer == None:
            continue
        answer = int(answer)
        answertime = time.time()
        if answer < 0:
            exit()
        if answer == weekday:
            if args['--timer']:
                print("Correct.\n(%0.1f sec)"%(answertime-showtime))
            else:
                print("Correct.")
        else:
            if args['--timer']:
                print("Wrong.\n(in %0.1f sec)"%(answertime-showtime))
            else:
                print("Wrong.")
            print("  The correct answer is %d" % weekday)
            explain_doomsday_for_date(target_date)
        print('')

if __name__ == "__main__":
    print("What about docopt docoptcfg for default values?")
    if args['explain']:
        target_date = datetime.datetime.strptime(args['DATE'], "%Y-%m-%d").date()
        after_date = datetime.date(1800, 1, 1).toordinal()
        weekday =  weekday_of_year_in_doomsday_format(target_date)
        print("The correct answer is %d" % weekday)
        explain_doomsday_for_date(target_date)

    if args['quiz']:
        # after_date = datetime.date(1800, 01, 01).toordinal()
        # before_date = datetime.date(2199, 12, 31).toordinal()
        after_date = datetime.datetime.strptime(args['--after'], "%Y-%m-%d").date()
        before_date = datetime.datetime.strptime(args['--before'], "%Y-%m-%d").date()
        run_quiz_loop(after_date, before_date)


